const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const path = require('path');
const sequelize = require('./db');
const fs = require('fs');
const cors = require('cors');
const User = require('./models/User');
const CartItem = require('./models/CartItem')
const Cart = require('./models/Cart')
const Order = require('./models/Order')
const { Product, Category } = require('./models/associations');
Product.belongsTo(Category, { foreignKey: 'categoryId' });
Category.hasMany(Product, { foreignKey: 'categoryId' });

if (!fs.existsSync(path.join(__dirname, 'uploads'))) {
    fs.mkdirSync(path.join(__dirname, 'uploads'));
}

const app = express();
app.use(express.json());
app.use(cors());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/');
    },
    filename: (req, file, cb) => {
        cb(null, `${Date.now()}-${file.originalname}`);
    },
});
const upload = multer({ storage });

app.post('/register', async (req, res) => {
    const { name, surname, patronymic, login, email, password } = req.body;

    try {
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) {
            return res.status(400).send({ error: "–ü–æ—á—Ç–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞." });
        }
        const existingLogin = await User.findOne({ where: { login } });
        if (existingLogin) {
            return res.status(400).send({ error: "–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç." });
        }
        const hashedPassword = await bcrypt.hash(password, 10);
        const role = email === 'anya_shmelkova@mail.ru' ? 'admin' : 'user';

        const user = await User.create({ 
            name, 
            surname, 
            patronymic, 
            login, 
            email, 
            password: hashedPassword,
            role: role
        });

        const token = jwt.sign({ id: user.id, role: user.role }, 'secretKey', { expiresIn: '1h' });
        res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", token });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).send({ error: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
    }
});

app.post('/login', async (req, res) => {
    const { login, password } = req.body;
    const user = await User.findOne({ where: { login } });
    
    if (!user || !await bcrypt.compare(password, user.password)) {
        return res.status(401).send("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    }
    const token = jwt.sign({ id: user.id, role: user.role }, 'secretKey');
    res.json({ token });
});

app.get('/api/users/:userId', async (req, res) => {
    const userId = req.params.userId;
    try {
        const user = await User.findByPk(userId);
        if (!user) {
            return res.status(404).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        res.json({ 
            id: user.id,
            name: user.name,
            surname: user.surname,
            patronymic: user.patronymic,
            email: user.email,
            login: user.login,
            role: user.role
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
});

app.post('/cart/create', async (req, res) => {
    const { userId, bouquetName, flowers, totalPrice, imageUrl } = req.body;

    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É
        const newCart = await Cart.create({
            userId,
            bouquetName,
            flowers: JSON.stringify(flowers),
            totalPrice,
            imageUrl
        });

        res.status(201).json(newCart);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã');
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
app.post('/cart/add', async (req, res) => {
    const { userId, productId, imageUrl } = req.body;

    if (!userId || !productId) {
        return res.status(400).send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const existingCartItem = await CartItem.findOne({
            where: { userId, productId },
        });

        if (existingCartItem) {
            // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            existingCartItem.count += 1;
            await existingCartItem.save();
            res.status(200).json(existingCartItem);
        } else {
            // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            const newCartItem = await CartItem.create({
                userId,
                productId,
                imageUrl: imageUrl || '',
            });
            res.status(201).json(newCartItem);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
    }
});

app.post('/api/cart/add', async (req, res) => {
    try {
        console.log("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É–∫–µ—Ç–∞:", req.body);

        const { userId, bouquetName, productId, flowers, totalPrice, imageUrl } = req.body;

        if (!userId) throw new Error("‚ùå userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
        if (!productId) throw new Error("‚ùå productId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
        if (!flowers || flowers.length === 0) throw new Error("‚ùå –ë—É–∫–µ—Ç –ø—É—Å—Ç!");
        if (!totalPrice) throw new Error("‚ùå totalPrice –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");

        // –°–û–•–†–ê–ù–Ø–ï–ú –ë–£–ö–ï–¢ –í –ë–î (–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç + —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤)
        const newCartItem = await CartItem.create({
            userId,
            bouquetName,
            productId, // üî¥ –î–û–ë–ê–í–ò–õ–ò productId –í –û–°–ù–û–í–ù–û–ô CartItem!
            flowers: JSON.stringify(flowers), // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç—ã –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
            totalPrice,
            imageUrl
        });

        console.log("‚úÖ –ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:", newCartItem);
        res.status(201).json(newCartItem);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—É–∫–µ—Ç–∞:", error.message);
        res.status(500).send(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
app.get('/cart/:userId', async (req, res) => {
    const { userId } = req.params;

    try {
        const cartItems = await CartItem.findAll({
            where: { userId },
            include: [
                {
                    model: Product,
                    as: 'CartProduct', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–ª–∏–∞—Å
                    attributes: ['name', 'price', 'imageUrl'], // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã
                },
            ],
        });

        console.log('–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', cartItems);
        res.status(200).json(cartItems);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
app.patch('/cart/update', async (req, res) => {
    const { userId, productId, newCount } = req.body;

    if (newCount === null || newCount === undefined) {
        return res.status(400).send('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    }

    try {
        // –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const cartItem = await CartItem.findOne({
            where: { userId, productId },
            include: [{ model: Product, as: 'CartProduct' }]
        });

        if (!cartItem) {
            return res.status(404).send('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        const availableStock = cartItem.CartProduct.stock;
        if (newCount > availableStock) {
            return res.status(400).send(`–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ ${availableStock} —à—Ç.`);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cartItem.count = newCount;
        await cartItem.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        res.status(200).json(cartItem); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.');
    }
});

// –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/cart/clear/:userId', async (req, res) => {
    const { userId } = req.params;

    try {
        const result = await CartItem.destroy({
            where: { userId },
        });

        if (result > 0) {
            console.log(`–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è userId=${userId} —É–¥–∞–ª–µ–Ω—ã`);
            res.status(200).send('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
        } else {
            res.status(404).send('–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
    }
});

app.delete('/cart/:userId/:productId', async (req, res) => {
    const { userId, productId } = req.params;

    try {
        const result = await CartItem.destroy({
            where: { userId, productId },
        });

        if (result > 0) {
            console.log(`–¢–æ–≤–∞—Ä —Å productId=${productId} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è userId=${userId}`);
            res.status(200).send('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
        } else {
            res.status(404).send('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
    }
});

app.post('/api/orders', async (req, res) => {
    const { userId, productId, quantity, status } = req.body;
    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:', req.body);

    if (!userId || !productId || !quantity || !status) {
        return res.status(400).send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞');
    }

    try {
        const order = await Order.create({
            userId,
            productId,
            quantity,
            status
        });

        console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', order);
        res.status(201).json(order);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
});

app.post('/api/orders', async (req, res) => {
    const { userId, productId, quantity, status } = req.body;
    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:', req.body);

    if (!userId || !productId || !quantity || !status) {
        return res.status(400).send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞');
    }

    try {
        const order = await Order.create({
            userId,
            productId,
            quantity,
            status
        });

        console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', order);
        res.status(201).json(order);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
});

app.patch('/api/orders/:orderId', async (req, res) => {
    const { orderId } = req.params;
    const { status, reason } = req.body;

    try {
        const order = await Order.findByPk(orderId, {
            include: [{ model: Product, as: 'OrderProduct' }]
        });

        if (!order) {
            return res.status(404).send('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (status === '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π') {
            const product = order.OrderProduct;

            if (!product) {
                return res.status(404).send('–¢–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            if (product.stock < order.quantity) {
                return res.status(400).send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ');
            }

            product.stock -= order.quantity;
            await product.save();
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = status;

        if (status === '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–π' && reason) {
            order.reason = reason;
        }

        await order.save();
        res.json(order);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
});

app.patch('/api/orders/:id', async (req, res) => {
    const orderId = req.params.id;
    const { status, reason } = req.body;

    try {
        const order = await Order.findByPk(orderId);
        if (!order) {
            return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        order.status = status;
        if (reason) {
            order.reason = reason;
        }

        await order.save();
        res.json(order);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞' });
    }
});

app.get('/api/orders/:userId', async (req, res) => {
    const userId = req.params.userId;
    try {
        const orders = await Order.findAll({
            where: { userId },
            include: [
                {
                    model: Product,
                    as: 'OrderProduct', // –ò—Å–ø–æ–ª—å–∑—É–µ–º alias, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –º–æ–¥–µ–ª–∏ Order
                    attributes: ['name', 'price', 'imageUrl'],
                },
            ],
        });

        const formattedOrders = orders.map(order => ({
            id: order.id,
            productName: order.OrderProduct ? order.OrderProduct.name : '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
            quantity: order.quantity,
            status: order.status,
            reason: order.reason, // –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ reason –≤ –æ—Ç–≤–µ—Ç
            date: order.createdAt,
        }));

        res.json(formattedOrders);  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–ª–∏–µ–Ω—Ç
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
    }
});

app.delete('/api/orders/:orderId', async (req, res) => {
    const orderId = req.params.orderId;
    try {
        await Order.destroy({ where: { id: orderId } });
        res.sendStatus(204);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
});

const checkAdmin = (req, res, next) => {
    const token = req.headers['authorization']?.split(' ')[1];
    if (!token) return res.status(403).send('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.');

    jwt.verify(token, 'secretKey', (err, decoded) => {
        if (err) return res.status(403).send('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.');
        if (decoded.role !== 'admin') return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        req.user = decoded;
        next();
    });
}

app.get('/api/admin/orders', checkAdmin, async (req, res) => {
    try {
        const orders = await Order.findAll({
            include: [
                {
                    model: User,
                    attributes: ['name', 'surname', 'patronymic'], // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                },
            ],
        });

        const orderData = orders.map(order => ({
            id: order.id,
            date: order.createdAt,
            userFullName: order.User
                ? `${order.User.name} ${order.User.surname} ${order.User.patronymic || ''}`.trim()
                : '–ù–µ —É–∫–∞–∑–∞–Ω–æ', // –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status: order.status,
            quantity: order.quantity || 1, // –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        }));

        res.json(orderData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
    }
});

app.patch('/api/orders/:orderId', async (req, res) => {
    const { orderId } = req.params;
    const { status, reason } = req.body;

    try {
        const order = await Order.findByPk(orderId);
        if (!order) {
            return res.status(404).send('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        order.status = status;
        if (status === '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–π' && reason) {
            order.reason = reason; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã
        }

        await order.save();
        res.json(order);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
});

app.post('/api/categories', async (req, res) => {
    const { name } = req.body;
    try {
        const category = await Category.create({ name });
        res.status(201).json(category);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
});

app.get('/api/categories', async (req, res) => {
    try {
        const categories = await Category.findAll();
        res.json(categories);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
});

app.delete('/api/categories/:categoryId', async (req, res) => {
    const { categoryId } = req.params;

    try {
        const category = await Category.findByPk(categoryId);
        if (!category) {
            return res.status(404).send('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        await Product.destroy({ where: { categoryId } });
        await Category.destroy({ where: { id: categoryId } });
        res.sendStatus(204);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
});

app.post('/api/products', upload.single('image'), async (req, res) => {
    try {
        const { name, categoryId, price, description, stock } = req.body;

        if (!name || !categoryId || !price || !description) {
            return res.status(400).send('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –∫—Ä–æ–º–µ stock.');
        }

        const imageUrl = req.file ? `/uploads/${req.file.filename}` : null;

        // –ï—Å–ª–∏ stock –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ –≤ 0
        const parsedStock = stock !== undefined ? parseInt(stock, 10) : 0;
        if (isNaN(parsedStock)) {
            return res.status(400).send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ stock');
        }

        const newProduct = await Product.create({
            name,
            categoryId,
            price,
            description,
            stock: parsedStock,
            imageUrl
        });

        res.status(201).json(newProduct);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    }
});


app.get('/api/products', async (req, res) => {
    try {
        const products = await Product.findAll({
            attributes: ['id', 'name', 'price', 'imageUrl', 'description', 'categoryId', 'stock'], // –í–∫–ª—é—á–∞–µ–º stock
            include: [{ model: Category, as: 'category', attributes: ['name'] }],
        });

        res.json(
            products.map(product => ({
                ...product.dataValues,
                categoryName: product.category?.name || null,
            }))
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
app.patch('/api/products/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { name, categoryId, price, description, stock } = req.body;

        const product = await Product.findByPk(id);
        if (!product) {
            return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (name) product.name = name;
        if (categoryId) product.categoryId = parseInt(categoryId, 10);
        if (price) product.price = parseFloat(price);
        if (description) product.description = description;
        if (stock !== undefined) {
            const parsedStock = parseInt(stock, 10);
            if (isNaN(parsedStock)) {
                return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ stock' });
            }
            product.stock = parsedStock;
        }

        await product.save();
        res.json(product);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
    }
});

app.get('/api/products/:productId', async (req, res) => {
    try {
        const product = await Product.findByPk(req.params.productId, {
            include: [{ model: Category, attributes: ['name'] }],
        });
        if (!product) return res.status(404).send('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        res.json({
            id: product.id,
            name: product.name,
            price: product.price,
            imageUrl: product.imageUrl,
            description: product.description,
            stock: product.stock,  // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ stock –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç
            category: product.Category || { name: '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º stock)
app.patch('/api/products/:productId', checkAdmin, upload.single('image'), async (req, res) => {
    const { productId } = req.params;
    const { name, categoryId, price, description, stock } = req.body;

    try {
        const product = await Product.findByPk(productId);
        if (!product) {
            return res.status(404).send('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (name) product.name = name;
        if (categoryId) product.categoryId = parseInt(categoryId, 10);
        if (price) product.price = parseFloat(price);
        if (description) product.description = description;
        if (req.file) product.imageUrl = `/uploads/${req.file.filename}`;

        if (stock !== undefined) {
            const parsedStock = parseInt(stock, 10);
            if (isNaN(parsedStock)) {
                return res.status(400).send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ stock');
            }
            product.stock = parsedStock;
        }

        await product.save();
        console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', product.dataValues);

        res.json(product);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error.message);
        res.status(500).send('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
});

app.delete('/api/products/:productId', checkAdmin, async (req, res) => {
    const { productId } = req.params;

    try {
        const product = await Product.findByPk(productId);
        if (!product) {
            return res.status(404).send('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        await product.destroy();
        res.status(204).send();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    }
});

sequelize.sync({ alter: true })
  .then(() => {
    app.listen(5000, () => {
      console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000');
    });
  })
  .catch(err => {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
  });